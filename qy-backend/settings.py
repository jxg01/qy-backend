"""
Django settings for qy-backend project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import sys
from datetime import timedelta
from dotenv import load_dotenv
import os
import logging
import logging.config

# 加载环境变量 - 先尝试加载本地开发配置，再加载通用配置
# 本地开发配置会覆盖通用配置中的同名变量
dotenv_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env.local')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
# 加载通用配置
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env'))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*unny&e53c9l1!4v3=p3@3=+h43xt9*ush=_==nvsj(f9qbf$#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'users.apps.UsersConfig',
    'jk_case.apps.JkCaseConfig',
    'projects.apps.ProjectsConfig',
    'mt_tool.apps.MtToolConfig',
    'ui_case.apps.UiCaseConfig',
    'ScheduledTasks.apps.ScheduledTasksConfig',
    'corsheaders',
    'drf_yasg',
    'django_celery_results',
    'django_celery_beat',      # Celery定时任务
]

CORS_ORIGIN_ALLOW_ALL = True

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 自动响应变化
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.utils.LoginMiddleWare',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend/dist')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'qy-backend.wsgi.application'
AUTH_USER_MODEL = 'users.UserProfile'
ROOT_URLCONF = 'qy-backend.urls'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', 'easy_api'),
        'USER': os.getenv('DB_USER', 'admin'),
        'PASSWORD': os.getenv('DB_PASSWORD', '123456'),
        'HOST': os.getenv('DB_HOST', '127.0.0.1'),
        'PORT': os.getenv('DB_PORT', '3306'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, '/static/')]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

REST_FRAMEWORK = {
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 5,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        'common.CustomerJWT.CustomJWTAuthentication',
        # 调试界面，配置后才能登录
        'rest_framework.authentication.SessionAuthentication',
    ),
    # 自定义 错误返回信息格式
    'EXCEPTION_HANDLER': 'common.exceptions.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.StandardPagination',
    # 默认搜索 过滤器
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=2),  # minutes | days | seconds | hours
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
}

# 允许携带cookie
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ('DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'VIEW', )
# 允许的请求头
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'
# 需要配置 为 True，保持数据库的时间为UTC，celery beat调度需要任务的时间为UTC
USE_TZ = True
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True

# celery redis配置
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://127.0.0.1:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://127.0.0.1:6379/1')
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# CELERY_RESULT_BACKEND = 'jango-db'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = "Asia/Shanghai"  # 必须与Django时区一致
CELERY_ENABLE_UTC = True
# DJANGO_CELERY_BEAT_TZ_AWARE = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {  # 详细格式（含时间、模块、行号）
            'format': '{levelname} {asctime}  {module}:{lineno} - {message}',
            'style': '{',
        },
        'simple': {  # 简洁格式
            'format': '{levelname} - {message}',
            'style': '{',
        },
        'celery_verbose': {     # Celery详细格式
            'format': '[Celery] {levelname} {asctime} {task_id:<10s} {module}:{lineno} - {message}',
            'style': '{',
        },
        'celery_task_verbose': {  # 用于任务的详细格式（含task_id，但使用安全的格式化）
            'format': '[Celery] {levelname} {asctime} {task_id:<10s} {module}:{lineno} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {  # 控制台输出（开发环境）
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {  # 文件输出（生产环境）
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django/django.log'),
            'when': 'midnight',  # 每天午夜切割日志
            'backupCount': 30,   # 保留30天日志
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'error_file': {  # 错误专用日志
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django/errors.log'),
            'formatter': 'verbose',
        },
        'celery_worker_file': {  # Celery Worker日志
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/celery/celery-worker.log'),
            'when': 'midnight',  # 每天午夜切割日志
            'backupCount': 30,   # 保留30天日志
            'formatter': 'celery_verbose',
            'encoding': 'utf-8',
        },
        'celery_beat_file': {  # Celery Beat日志
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/celery/celery-beat.log'),
            'when': 'midnight',  # 每天午夜切割日志
            'backupCount': 30,   # 保留30天日志
            'formatter': 'celery_verbose',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        'django': {  # Django框架内置日志
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'app': {  # 自定义应用日志
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['celery_worker_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.task': {
            'handlers': ['celery_worker_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
            'formatter': 'verbose',  # 使用不包含task_id的格式器，避免格式化错误
        },
        'celery.beat': {
            'handlers': ['celery_beat_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        }
    },
}
logging.config.dictConfig(LOGGING)


# 确保日志目录存在
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)
# 确保celery日志目录存在
CELERY_LOG_DIR = os.path.join(LOG_DIR, 'celery')
os.makedirs(CELERY_LOG_DIR, exist_ok=True)
# 确保django日志目录存在
DJANGO_LOG_DIR = os.path.join(LOG_DIR, 'django')
os.makedirs(DJANGO_LOG_DIR, exist_ok=True)

UI_TEST_BROWSER_TYPE = 'chromium'  # chrome | firefox

# 使用：
# from celery.utils.log import get_task_logger  # 使用Celery专用日志器 ｜ 获取带任务上下文的日志器
# tasks 文件中使用：logger = get_task_logger(__name__)  # 获取带任务ID的日志器

# 启动celery指定日志文件：celery -A your_project worker --loglevel=info --logfile=logs/celery_tasks.log  # 覆盖settings配置
# logger = logging.getLogger('app')  # 使用自定义日志器


# 外键中增加： related_name = 'related_cases'
# 使用：case_count = serialize.CharField(source='related_cases.count', default=0)
# 使用：cases = serialize.CharField(source='related_cases', default=0)


